from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.services.database import is_user_registered
from app.utils.message_cleaner import message_cleaner
from app.config_reader import config
from app.services.database import get_user_info, get_user_sessions, is_user_blocked

router = Router()


def get_main_menu_keyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É", callback_data="choose_game")
    builder.button(text="–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π", callback_data="list_sessions")
    builder.button(text="–ú–æ–∏ —Å–µ—Å—Å–∏–∏", callback_data="my_sessions")
    builder.button(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    builder.button(text="–ü–æ–º–æ—â—å", callback_data="help")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if user_id == config.admin_user_id:
        builder.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")

    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    return builder.as_markup()


@router.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery):
    if callback.from_user.id != config.admin_user_id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:")


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    user_id = callback.from_user.id

    if not await is_user_registered(user_id):
        await message_cleaner.delete_previous_messages(callback.bot, callback.from_user.id)
        await callback.answer(
            "–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    if await is_user_blocked(user_id):
        await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return
    await message_cleaner.delete_previous_messages(callback.bot, callback.from_user.id)
    response = await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard(user_id))
    await message_cleaner.add_message_to_delete(callback.from_user.id, response)
    await callback.answer()


@router.callback_query(F.data == "help")
async def show_help_from_menu(callback: CallbackQuery):
    text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.")
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "choose_game")
async def choose_game(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="ü¶Ü GGDuck", callback_data="game_GouseGouseDuck")
    builder.button(text="üé≤ –î—Ä—É–≥–∞—è –∏–≥—Ä–∞", callback_data="game_other")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(2, 1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=builder.as_markup())


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_info = await get_user_info(user_id)
    if not user_info:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
        return

    profile_text = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user_info['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_info['age']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {user_info['created_sessions']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {user_info['attended_sessions']}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")

    await callback.message.edit_text(profile_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "my_sessions")
async def show_my_sessions(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_sessions = get_user_sessions(user_id)

    if not user_sessions:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.",
                                         reply_markup=InlineKeyboardBuilder().button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                                                                                     callback_data="back_to_menu").as_markup())
        return

    sessions_text = "–í–∞—à–∏ —Å–µ—Å—Å–∏–∏:\n\n"
    builder = InlineKeyboardBuilder()

    for session in user_sessions:
        session_type = "–°–æ–∑–¥–∞–Ω–∞ –≤–∞–º–∏" if session['is_creator'] else "–£—á–∞—Å—Ç–∏–µ"
        sessions_text += f"ID: {session['id']}, –ò–≥—Ä–∞: {session['game']}, –î–∞—Ç–∞: {session['date']}, {session_type}\n"
        builder.button(text=f"–°–µ—Å—Å–∏—è {session['id']}", callback_data=f"session_info_{session['id']}")

    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)

    await callback.message.edit_text(sessions_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "manage_users")
async def manage_users(callback: CallbackQuery):
    if callback.from_user.id != config.admin_user_id:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
    builder.button(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="blocked_users")
    builder.button(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_statistics")
    builder.button(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(2)

    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", reply_markup=builder.as_markup())
